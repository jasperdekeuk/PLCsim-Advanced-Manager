@page "/plcoverview"
@using Siemens.Simatic.Simulation.Runtime
@using System.Net.Http.Json
@using System.Reflection.Metadata.Ecma335
@using BootstrapBlazor.Components
@using Color = MudBlazor.Color
@using Console = System.Console
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar


<div style="width: 100vw; min-width: 1000px; overflow-x: auto; justify-content: center; height:auto">
    <div style="padding: 20px">
        <MudText Typo="Typo.h6">PLC Instances </MudText>

        <MudAlert Severity="Severity.Warning">All instances that are powered on must have the same communication interface (softbus/TCPIP)</MudAlert>
    </div>
    <MudTable Items="@instances" GroupBy="@_groupDefinition" T="IInstance" @ref="mudTable"
              Hover="true" Dense="true" Breakpoint="Breakpoint.Sm"
              FixedHeader="true" Height="400px" Style="padding: 20px"
              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)">
        <ToolBarContent>
            <div style="display: flex; justify-content: space-between;">
                @inject IDialogService DialogService
                <MudButton  Color="Color.Success" @onclick="OpenDialogNewPLC" Variant="Variant.Filled" Class="mr-2">
                    Create new PLC
                </MudButton>
                <MudButton @onclick="OpenDialogStorage" Variant="Variant.Filled">
                    Storage
                </MudButton>
            </div>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>PLC Name</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Controller IP</MudTh>
            <MudTh>CPU type</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">
                @($"{context.GroupName}: {context.Key}")
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="PLC Name">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <div>
                        @if (context.OperatingState == EOperatingState.Off)
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.PowerSettingsNew" Title="powerOn" Size="Size.Small" @onclick="() => { try { context.PowerOn(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }"></MudIconButton>
                        }
                        else if (context.OperatingState == EOperatingState.Run || context.OperatingState == EOperatingState.Stop)
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.PowerSettingsNew" Title="powerOff" Size="Size.Small" @onclick="() => { try { context.PowerOff(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }" Color="Color.Error"></MudIconButton>
                        }
                        else
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        }
                        @if (context.OperatingState == EOperatingState.Stop)
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.PlayArrow" Color="Color.Success" Size="Size.Small"
                                           Title="Run"
                                           @onclick="() => { try { context.Run(); }catch (Exception e) { Snackbar.Add(e.Message); } }"/>
                        }
                        else if (context.OperatingState == EOperatingState.Run)
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.Stop" Color="Color.Error" Size="Size.Small" Title="Stop" @onclick="() => { try { context.Stop(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }"/>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.PlayArrow" Title="powerOff" Size="Size.Small" Disabled="true" @onclick="() => { try { context.PowerOff(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }" Color="Color.Error"></MudIconButton>
                        }
                    </div>
                    <div>
                        @try
                        {
                            @context.Name
                            ;
                        }
                        catch (Exception e)
                        {
                        }
                    </div>
                </div>
            </MudTd>
            <MudTd DataLabel="Status" Width="200px">
                @* <MudAlert Severity="Severity.Normal" Dense="true" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Text" NoIcon="true" Class="my-2">@context.OperatingState</MudAlert> *@
                @switch (context.OperatingState)
                {
                    case EOperatingState.Off:
                        <MudChip Icon="@Icons.Material.Outlined.HighlightOff" Variant="Variant.Text" Size="Size.Small" Disabled="true" Color="Color.Transparent"> @context.OperatingState </MudChip>
                        break;
                    case EOperatingState.Run:
                        <MudChip Icon="@Icons.Material.Outlined.PlayCircleOutline" Variant="Variant.Text" Size="Size.Small" Color="Color.Success"> @context.OperatingState </MudChip>
                        break;
                    case EOperatingState.Stop:
                        <MudChip Icon="@Icons.Material.Outlined.StopCircle" Variant="Variant.Text" Size="Size.Small" Color="Color.Warning"> @context.OperatingState </MudChip>
                        break;
                    case EOperatingState.InvalidOperatingState:
                        <MudChip Icon="@Icons.Material.Outlined.ErrorOutline" Variant="Variant.Text" Size="Size.Small" Color="Color.Error"> @context.OperatingState </MudChip>
                        break;
                    default:
                        <MudChip Icon="@Icons.Material.Outlined.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Info"> @context.OperatingState </MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Controller IP">
                <div class="d-flex align-items-start">
                    <div class="ml-2">
                        @foreach (var ip in context.ControllerIP)
                        {
                            <div>@ip</div>
                        }
                    </div>
                    @if (context.ControllerIP.Length != 0)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" OnClick="() => OpenDialogSetIPSettings(context)" Disabled="@(!(context.OperatingState == EOperatingState.Off || context.OperatingState == EOperatingState.Stop))"></MudIconButton>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="CPU type">@context.CPUType</MudTd>
            <MudTd >
            
                @if (context.CommunicationInterface == ECommunicationInterface.TCPIP)
                {
                    <MudTooltip Text="When powered off, this will swap communication interface">
                        <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                   OnClick="() => { if (context.OperatingState == EOperatingState.Off) context.CommunicationInterface = ECommunicationInterface.Softbus; }">
                            TCP/IP
                        </MudChip>
                    </MudTooltip>
                }
                else if (context.CommunicationInterface == ECommunicationInterface.Softbus)
                {
                    <MudTooltip Text="When powered off, this will swap communication interface">
                        <MudChip Variant="Variant.Outlined" Color="Color.Dark" Size="Size.Small" OnClick="() => { if (context.OperatingState == EOperatingState.Off) context.CommunicationInterface = ECommunicationInterface.TCPIP; }">Softbus</MudChip>
                    </MudTooltip>
                }
                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="() => OpenNewTab(context.Name)" Size="Size.Small" Title="Show variables in new tab"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Outlined.History" Title="Snapshots" Size="Size.Small" @onclick="() => SeeSnapshots(context)" ></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Title="Delete" Size="Size.Small"
                               @onclick="() => RemoveInstance(context)">
                </MudIconButton>

                <MudMenu Icon="@Icons.Material.Outlined.MoreVert" Size="Size.Small" Dense="true">
                    <MudMenuItem @onclick="() => { try { context.MemoryReset(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }">MRES</MudMenuItem>
                    <MudMenuItem @onclick="() => OpenDialogPLCSettings(context)">Settings</MudMenuItem>
                    <MudMenuItem @onclick="() => CheckNetinterfaceMapping(context)">Netinterface Mapping</MudMenuItem>
                </MudMenu>
            
            </MudTd>

        </RowTemplate>

    </MudTable>
</div>


@code
{
    public string ip;
    public IMask ipv4Mask = RegexMask.IPv4();
    STagInfo[] _tagInfos;

    private TableGroupDefinition<IInstance> _groupDefinition = new()
    {
        GroupName = "Communication",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.CommunicationInterface
    };

    private void OpenNewTab(string instanceName)
    {
        JS.InvokeAsync<object>("open", $"/dataview/{instanceName}", "_blank");
    }
}