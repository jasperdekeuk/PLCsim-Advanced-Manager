@using Siemens.Simatic.Simulation.Runtime
@using Color = MudBlazor.Color
@using System.Collections.Concurrent
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@page "/dataview/{instanceName}"


<div style="width: 100vw; min-width: 1000px; overflow-x: auto; justify-content: center; height:auto">
    <div style="padding: 20px;">
        <div>
            <MudText Typo="Typo.h6">Data Overview </MudText>
            <MudAlert Severity="Severity.Warning">This feature is still in development </MudAlert>
        </div>


        <div style="padding: 20px; background-color: #f0f0f0;">
            <MudText Typo="Typo.h5" Color="Color.Primary">@InstanceName</MudText>
        </div>

        @if (InstanceRegistered)
        {
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Datablocks">
                    <MudTable Items="_dbDataValueByNames" T="SDataValueByName" FixedHeader="true" Dense="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Datablocks</MudText>
                        </ToolBarContent>
                        <ColGroup>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">
                                @context.Name
                            </MudTd>
                            <MudTd DataLabel="Type">
                                @context.DataValue.Type
                            </MudTd>
                            <MudTd DataLabel="Value">
                                @parseData(context.DataValue)
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" @onclick="() => ChangeData(context)"></MudIconButton>
                            </MudTd>
                        </RowTemplate>

                    </MudTable>

                </MudTabPanel>
                <MudTabPanel Text="Inputs">
                    <MudTable Items="_inputDataValueByNames" T="SDataValueByName">
                        <ColGroup>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                            <col style="width: 50px"/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">
                                @context.Name
                            </MudTd>
                            <MudTd DataLabel="Type">
                                @context.DataValue.Type
                            </MudTd>
                            <MudTd DataLabel="Value">
                                @parseData(context.DataValue)
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" @onclick="() => ChangeData(context)"></MudIconButton>
                            </MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Outputs">
                    <MudTable Items="_outputDataValueByNames" T="SDataValueByName">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">
                                @context.Name
                            </MudTd>
                            <MudTd DataLabel="Type">
                                @context.DataValue.Type
                            </MudTd>
                            <MudTd DataLabel="Value">
                                @parseData(context.DataValue)
                            </MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudTabPanel>
            </MudTabs>
        }
        else
        {
            <MudAlert Severity="Severity.Error">Instance not registered</MudAlert>
        }
    </div>
</div>

@code {

    [Parameter]
    public string InstanceName { get; set; }

    public bool InstanceRegistered = false;

    public IInstance SelectedInstance { get; set; }

    private SDataValueByName[] _inputDataValueByNames;
    private SDataValueByName[] _outputDataValueByNames;
    private SDataValueByName[] _dbDataValueByNames;

    private Timer _timer;

    protected override void OnInitialized()
    {
        OnSelectInstance(InstanceName);

        _timer = new Timer(new TimerCallback(async (object state) =>
        {
            await InvokeAsync(() =>
            {
                readValues();
                StateHasChanged();
            });
        }), null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));

        base.OnInitialized();
    }

    private void OnSelectInstance(string name)
    {
        try
        {
            SelectedInstance = SimulationRuntimeManager.CreateInterface(name);
            InstanceRegistered = true;
            SelectedInstance.OnHardwareConfigChanged += (sender, code, time) =>
            {
                Snackbar.Add("New configuration downloaded to the instance");
                setDataValueByNames();
            };
            setDataValueByNames();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while selecting instance {name}: {e.Message}");
            InstanceRegistered = false;
        }
    }

    private void setDataValueByNames()
    {
        if (SelectedInstance == null)
        {
            Snackbar.Add("Issue with reading data for the given instance");
            return;
        }

        SelectedInstance.UpdateTagList();

        _inputDataValueByNames = SelectedInstance.TagInfos.Where(e => e.Area == EArea.Input && e.PrimitiveDataType != EPrimitiveDataType.Struct)
            .Select(e => new SDataValueByName { Name = e.Name, DataValue = new SDataValue { Type = e.PrimitiveDataType } })
            .ToArray();
        _outputDataValueByNames = SelectedInstance.TagInfos
            .Where(e => e.Area == EArea.Output && e.PrimitiveDataType != EPrimitiveDataType.Struct)
            .Select(e => new SDataValueByName
            {
                Name = e.Name,
                DataValue = new SDataValue { Type = e.PrimitiveDataType }
            })
            .ToArray();
        _dbDataValueByNames = SelectedInstance.TagInfos.Where(e => e.Area == EArea.DataBlock && e.PrimitiveDataType != EPrimitiveDataType.Struct)
            .Select(e => new SDataValueByName { Name = e.Name, DataValue = new SDataValue { Type = e.PrimitiveDataType } })
            .ToArray();

        readValues();
    }


    public void readValues()
    {
        if (!InstanceRegistered)
        {
            OnSelectInstance(SelectedInstance.Name);
            return;
        }
        for (int i = 0; i < _dbDataValueByNames.Length; i++)
        {
            try
            {
                if (_dbDataValueByNames[i].DataValue.Type != EPrimitiveDataType.Struct)
                {
                    _dbDataValueByNames[i].DataValue = SelectedInstance.Read(_dbDataValueByNames[i].Name);
                }
            }
            catch (Exception e)
            {
                InstanceRegistered = false;
            }
        }
        for (int i = 0; i < _inputDataValueByNames.Length; i++)
        {
            try
            {
                if (_inputDataValueByNames[i].DataValue.Type != EPrimitiveDataType.Struct)
                {
                    _inputDataValueByNames[i].DataValue = SelectedInstance.Read(_inputDataValueByNames[i].Name);
                }
            }
            catch (Exception e)
            {
                InstanceRegistered = false;
            }
        }
        for (int i = 0; i < _outputDataValueByNames.Length; i++)
        {
            try
            {
                if (_outputDataValueByNames[i].DataValue.Type != EPrimitiveDataType.Struct)
                {
                    _outputDataValueByNames[i].DataValue = SelectedInstance.Read(_outputDataValueByNames[i].Name);
                }
            }
            catch (Exception e)
            {
                InstanceRegistered = false;
            }
        }

        StateHasChanged();
    }

    public object parseData(SDataValue dataValue)
    {
        switch (dataValue.Type)
        {
            case EPrimitiveDataType.Unspecific:
                return "Unspecific type, value not avaliable";
            case EPrimitiveDataType.Struct:
                return "Struct type, not implemented"; // not yet implemented for now
            case EPrimitiveDataType.Bool:
                return dataValue.Bool;
            case EPrimitiveDataType.Int8:
                return dataValue.Int8;
            case EPrimitiveDataType.Int16:
                return dataValue.Int16;
            case EPrimitiveDataType.Int32:
                return dataValue.Int32;
            case EPrimitiveDataType.Int64:
                return dataValue.Int64;
            case EPrimitiveDataType.UInt8:
                return dataValue.UInt8;
            case EPrimitiveDataType.UInt16:
                return dataValue.UInt16;
            case EPrimitiveDataType.UInt32:
                return dataValue.UInt32;
            case EPrimitiveDataType.UInt64:
                return dataValue.UInt64;
            case EPrimitiveDataType.Float:
                return dataValue.Float;
            case EPrimitiveDataType.Double:
                return dataValue.Double;
            case EPrimitiveDataType.Char:
                return dataValue.Char;
            case EPrimitiveDataType.WChar:
                return dataValue.WChar;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }


    public void ChangeData(SDataValueByName dataValueByName)
    {
        var parameters = new DialogParameters<ChangeDataDialog>();
        parameters.Add("Instance", SelectedInstance);
        parameters.Add("DataValueByName", dataValueByName);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<ChangeDataDialog>("Change value", parameters, options);
    }



}