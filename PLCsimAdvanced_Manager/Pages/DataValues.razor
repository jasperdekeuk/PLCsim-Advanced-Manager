@using Siemens.Simatic.Simulation.Runtime
@using Color = MudBlazor.Color
@using System.Collections.Concurrent
@inject ISnackbar Snackbar
@page "/dataview/{instanceName}"


<div style="width: 100vw; min-width: 1000px; overflow-x: auto; justify-content: center; height:auto">
    <div style="padding: 20px;">
        <div>
            <MudText Typo="Typo.h6">Data Overview </MudText>
            <MudAlert Severity="Severity.Warning">This feature is still in development </MudAlert>
        </div>


        <div style="padding: 20px; background-color: #f0f0f0;">
            <div>
                <MudText Typo="Typo.h5" Color="Color.Primary">@InstanceName</MudText>
            </div>
            <div>
                @switch (SelectedInstance.OperatingState)
                {
                    case EOperatingState.Off:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Disabled="true" Color="Color.Transparent"> @SelectedInstance.OperatingState </MudChip>
                        break;
                    case EOperatingState.Run:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success"> @SelectedInstance.OperatingState </MudChip>
                        break;
                    case EOperatingState.Stop:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning"> @SelectedInstance.OperatingState </MudChip>
                        break;
                    case EOperatingState.InvalidOperatingState:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error"> @SelectedInstance.OperatingState </MudChip>
                        break;
                    default:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info"> @SelectedInstance.OperatingState </MudChip>
                        break;
                }
            </div>
        </div>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

            <MudTabPanel Text="Datablocks">
                <DataTable Area="EArea.DataBlock" InstanceName="@InstanceName"></DataTable>
            </MudTabPanel>
            <MudTabPanel Text="Inputs">
                <DataTable Area="EArea.Input" InstanceName="@InstanceName"></DataTable>

            </MudTabPanel>
            <MudTabPanel Text="Outputs">
                <DataTable Area="EArea.Output" InstanceName="@InstanceName"></DataTable>
            </MudTabPanel>
        </MudTabs>

    </div>
</div>

@code {

    [Parameter] public string InstanceName { get; set; }
    private IInstance SelectedInstance;


    protected override async Task OnInitializedAsync()
    {
        OnSelectInstance(InstanceName);
    }

    private void OnSelectInstance(string name)
    {
        try
        {
            SelectedInstance = SimulationRuntimeManager.CreateInterface(name);
            SelectedInstance.OnOperatingStateChanged += OnSelectedInstanceOnOnOperatingStateChanged;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while selecting instance {name}: {e.Message}",Severity.Error);
        }
    }

    private void OnSelectedInstanceOnOnOperatingStateChanged(IInstance inSender, ERuntimeErrorCode inErrorCode, DateTime inDateTime, EOperatingState inPrevState, EOperatingState inOperatingState)
    {
        if (inSender != SelectedInstance)
        {
            return;
        }

        InvokeAsync(StateHasChanged);
    }

}