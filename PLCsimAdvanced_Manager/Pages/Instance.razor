@inject ISnackbar Snackbar
@page "/instance/{instanceName}"
@layout InstanceLayout
@using PLCsimAdvanced_Manager.Services
@using PLCsimAdvanced_Manager.Services.Persistence
@using Siemens.Simatic.Simulation.Runtime
@using Color = MudBlazor.Color
@inject ManagerFacade managerFacade
@inject IDialogService DialogService
@inject PersistenceHandler persistenceHandler


<div style="width: 100vw; min-width: 1000px; overflow-x: auto; justify-content: center; height:93vh">
    <div style="padding: 20px;">
        <div>
            <MudText Typo="Typo.h6">Instance view</MudText>
        </div>
        <div style="display: flex; align-content: center; justify-content: stretch">
            <div style="align-items: center; display: flex; justify-content: center; padding: 20px">
                <MudText Typo="Typo.h5" Color="Color.Primary">@InstanceName</MudText>
                @* <MudSpacer/> *@
                <InstanceOperatingstateChip SelectedInstance="SelectedInstance"></InstanceOperatingstateChip>

            </div>
            <MudToolBar style="background-color: #D5E9F1; flex-grow: 1">

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.PowerSettingsNew"
                           Title="powerOn"
                           Disabled="SelectedInstance.OperatingState != EOperatingState.Off" Color="Color.Success"
                           Size="Size.Small"
                           @onclick="() => { try { Task.Run(() =>  SelectedInstance.PowerOn()); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }"
                           Style="margin-right: 10px;">Power On
                </MudButton>

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.PowerSettingsNew"
                           Title="powerOff"
                           Disabled="SelectedInstance.OperatingState != EOperatingState.Run && SelectedInstance.OperatingState != EOperatingState.Stop"
                           Color="Color.Error" Size="Size.Small"
                           @onclick="() => { try { Task.Run(() => SelectedInstance.PowerOff()); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }">
                    Power Off
                </MudButton>



                <MudSpacer/>
                @* <InstanceRunStopButton SelectedInstance="SelectedInstance"></InstanceRunStopButton> *@
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.PlayArrow" Color="Color.Success"
                           Size="Size.Small"
                           Title="Run" Disabled="SelectedInstance.OperatingState != EOperatingState.Stop"
                           @onclick="() => { try { SelectedInstance.Run(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }"
                           Style="margin-right: 10px;">Run
                </MudButton>

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Stop" Color="Color.Error"
                           Size="Size.Small"
                           Title="Stop" Disabled="SelectedInstance.OperatingState != EOperatingState.Run"
                           @onclick="() => { try { SelectedInstance.Stop(); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }">
                    Stop
                </MudButton>


                <MudSpacer/>
                <MudButton
                    @onclick="() => { try { managerFacade.InstanceHandler.MemoryReset(SelectedInstance.ID); }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }">
                    MRES
                </MudButton>


            </MudToolBar>
        </div>
        <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="true" ApplyEffectsToContainer="true"
                 Class="mt-8" PanelClass="px-4 py-6" KeepPanelsAlive="false" Style="height: 70vh">
            <MudTabPanel Text="General">
                <MudCard Style="padding: 20px; flex: auto">
                    <MudGrid>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">PLC Family</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.CPUType.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Name</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.Info.Name</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">ID</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.Info.ID</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Controller Name</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.ControllerName</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">License Status</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.LicenseStatus</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Controller Short Designation</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.ControllerShortDesignation</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Communication Interface</MudText>
                                <MudText
                                    Typo="Typo.body2"> @SelectedInstance.CommunicationInterface.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Controller IP</MudText>
                                <div class="d-flex align-items-start">
                                    <div class="ml-2">
                                        @foreach (var ip in SelectedInstance.ControllerIP)
                                        {
                                            <div>@ip</div>
                                        }
                                    </div>
                                    @if (SelectedInstance.ControllerIP.Length != 0)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"
                                                       OnClick="() => OpenDialogSetIPSettings(SelectedInstance)"
                                                       Disabled="@(!(SelectedInstance.OperatingState == EOperatingState.Off || SelectedInstance.OperatingState == EOperatingState.Stop))"></MudIconButton>
                                    }
                                </div>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Strict Motion Timing</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.StrictMotionTiming.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Operating Mode</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.OperatingMode.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">System Time</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.SystemTime</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Scale Factor</MudText>
                                <MudText Typo="Typo.body2"> @SelectedInstance.ScaleFactor.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Overwrite Minimum Cycle Time</MudText>
                                <MudText
                                    Typo="Typo.body2"> @SelectedInstance.OverwrittenMinimalCycleTime_ns.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Send Sync Event in Default Mode Enabled</MudText>
                                <MudText
                                    Typo="Typo.body2"> @SelectedInstance.IsSendSyncEventInDefaultModeEnabled.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudStack>
                                <MudText Typo="Typo.subtitle2">Storage Path</MudText>
                                <MudText Style="overflow: auto"
                                         Typo="Typo.body2"> @SelectedInstance.StoragePath</MudText>
                            </MudStack>
                        </MudItem>
                    </MudGrid>

                </MudCard>

            </MudTabPanel>
            <MudTabPanel Text="Data">
                <MudCard Style="padding: 20px; flex: auto">
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                        <MudTabPanel Text="Datablocks">
                            <DataTable Area="EArea.DataBlock" InstanceName="@InstanceName"></DataTable>
                        </MudTabPanel>
                        <MudTabPanel Text="Inputs">
                            <DataTable Area="EArea.Input" InstanceName="@InstanceName"></DataTable>

                        </MudTabPanel>
                        <MudTabPanel Text="Outputs">
                            <DataTable Area="EArea.Output" InstanceName="@InstanceName"></DataTable>
                        </MudTabPanel>
                    </MudTabs>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Snapshots">

                <MudCard Style="padding: 20px; flex: auto">
                    <MudText Typo="Typo.body2"> Size Snapshots: @rootDirectorySize </MudText>
                    <MudDivider></MudDivider>
                    <MudButton Size="Size.Small" Disabled="SelectedInstance.OperatingState != EOperatingState.Off"
                               Variant="Variant.Outlined" Color="Color.Success" OnClick="() => setNameDialog = true">
                        <MudText Typo="Typo.subtitle2">Create Snapshot</MudText>
                    </MudButton>

                    <MudSimpleTable Dense="true">
                        <MudTh>Name</MudTh>
                        <MudTh>Timestamp</MudTh>
                        <MudTh Style="text-align: right;">Actions</MudTh>

                        @foreach (var snapshot in GetSnapshots())
                        {
                            var dir = snapshot; // Create a local copy to avoid issues with the foreach loop
                            var isRunning = SelectedInstance.OperatingState != EOperatingState.Off;

                            <MudTr>
                                <MudTd>


                                    <MudChip Size="Size.Small" Disabled="@isRunning" Variant="Variant.Text"
                                             Color="Color.Info">
                                        <MudText Typo="Typo.subtitle1">
                                            <strong>@Path.GetFileName(snapshot)</strong>
                                        </MudText>
                                    </MudChip>
                                </MudTd>
                                <MudTd>
                                    <small>
                                        @File.GetLastWriteTime(snapshot).ToShortDateString()<br/>@File.GetLastWriteTime(snapshot).ToShortTimeString()
                                    </small>
                                </MudTd>
                                <MudTd Style="text-align: right;">
                                    <MudButtonGroup Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined"
                                                    Color="Color.Success" OverrideStyles="false">
                                        <MudIconButton Title="Rollback"
                                                       Icon="@Icons.Material.Outlined.SettingsBackupRestore"
                                                       Size="Size.Small" Disabled="@isRunning"
                                                       Variant="Variant.Outlined" Color="Color.Success"
                                                       OnClick="() => SelectedInstance.RetrieveStorage(snapshot)"></MudIconButton>
                                        <MudIconButton Title="Rename" Icon="@Icons.Material.Outlined.Edit"
                                                       Size="Size.Small" Disabled="@isRunning"
                                                       Variant="Variant.Outlined" Color="Color.Warning"
                                                       OnClick="() => OpenRenameDialog(dir)"></MudIconButton>
                                        <MudIconButton Title="Delete" Icon="@Icons.Material.Outlined.Delete"
                                                       Size="Size.Small" Disabled="@isRunning"
                                                       Variant="Variant.Outlined" Color="Color.Error"
                                                       OnClick="() => DeleteFile(dir)"></MudIconButton>
                                    </MudButtonGroup>
                                </MudTd>
                            </MudTr>
                        }
                    </MudSimpleTable>
                    <MudDialog @bind-IsVisible="setNameDialog" CloseButton="true">
                        <DialogContent>
                            <MudTextField @bind-Value="@newSnapshotName" Label="New snapshot name"/>
                        </DialogContent>
                        <DialogActions>
                            <MudButton Color="Color.Primary" OnClick="CreateSnapshot">Create snapshot</MudButton>
                        </DialogActions>
                    </MudDialog>
                    <MudDialog @bind-IsVisible="renameDialog" CloseButton="true">
                        <DialogContent>
                            <MudTextField @bind-Value="@newDirectoryName" Label="New snapshot name"/>
                        </DialogContent>
                        <DialogActions>
                            <MudButton Color="Color.Primary" OnClick="RenameDirectory">Rename</MudButton>
                        </DialogActions>
                    </MudDialog>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Logs">
                <MudCard Style="padding: 20px; flex: auto">
                    <MudTable Items="@logs" FixedHeader="true" Height="400px" Hover="true">
                        <HeaderContent>
                            <MudTh>Timestamp</MudTh>
                            <MudTh>Log</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Timestamp</MudTd>
                            @* <MudTd>@context.Message</MudTd> *@
                            <MudTd>
                                @{
                                    var words = context.Message.Split(' ');
                                    foreach (var word in words)
                                    {
                                        switch (word)
                                        {
                                            case "Off":
                                                <MudChip Icon="@Icons.Material.Outlined.HighlightOff"
                                                         Variant="Variant.Text" Size="Size.Small" Disabled="true"
                                                         Color="Color.Transparent"> @word </MudChip>
                                                break;
                                            case "Run":
                                                <MudChip Icon="@Icons.Material.Outlined.PlayCircleOutline"
                                                         Variant="Variant.Text" Size="Size.Small"
                                                         Color="Color.Success"> @word </MudChip>
                                                break;
                                            case "Stop":
                                                <MudChip Icon="@Icons.Material.Outlined.StopCircle"
                                                         Variant="Variant.Text" Size="Size.Small"
                                                         Color="Color.Warning"> @word </MudChip>
                                                break;
                                            case "Invalid":
                                                <MudChip Icon="@Icons.Material.Outlined.ErrorOutline"
                                                         Variant="Variant.Text" Size="Size.Small"
                                                         Color="Color.Error"> @word </MudChip>
                                                break;
                                            case "ShuttingDown":
                                                <MudChip Icon="@Icons.Material.Outlined.Info" Variant="Variant.Text"
                                                         Size="Size.Small" Color="Color.Info"> @word </MudChip>
                                                break;
                                            case "Startup":
                                                <MudChip Icon="@Icons.Material.Outlined.Info" Variant="Variant.Text"
                                                         Size="Size.Small" Color="Color.Info"> @word </MudChip>
                                                break;
                                            case "Booting":
                                                <MudChip Icon="@Icons.Material.Outlined.Info" Variant="Variant.Text"
                                                         Size="Size.Small" Color="Color.Info"> @word </MudChip>
                                                break;
                                            default:
                                                @word
                                                break;
                                        }

                                        <text>&nbsp;</text>
                                        // add space after each word
                                    }
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Settings">
                <MudStack>
                    <MudItem>
                        <MudText Typo="Typo.h5"> On Startup</MudText>
                        <MudText Typo="Typo.body1"> Actions to be taken on this instance, when starting up PLCsim
                            Advanced Manager
                        </MudText>
                        <MudCard Style="padding: 20px; flex: auto">

                            <MudGrid>
                                <MudItem xs="4">
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle2">Register On Startup</MudText>
                                        <MudCheckBox @bind-Checked="RegisterOnStartup"></MudCheckBox>
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle2">Power On Startup</MudText>
                                        <MudCheckBox @bind-Checked="PowerOnStartup"></MudCheckBox>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCard>


                    </MudItem>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Nodegraph">
                <Nodegraph InstanceName="@InstanceName"></Nodegraph>
            </MudTabPanel>
        </MudTabs>

    </div>
</div>

@code {

    private bool _registerOnStartup;
    private bool _powerOnStartup;
    private bool _runOnStartup;
    [CascadingParameter] public InstanceLayout Layout { get; set; }


    public bool RegisterOnStartup
    {
        get => _registerOnStartup;
        set
        {
            if (_registerOnStartup != value)
            {
                _registerOnStartup = value;
                if (!value)
                {
                    PowerOnStartup = false;
                }
            }

            persistenceHandler.UpdateSettings(SelectedInstance.StoragePath, RegisterOnStartup, PowerOnStartup);
        }
    }

    public bool PowerOnStartup
    {
        get => _powerOnStartup;
        set
        {
            if (_powerOnStartup != value)
            {
                _powerOnStartup = value;
                if (value)
                {
                    RegisterOnStartup = true;
                }
            }

            persistenceHandler.UpdateSettings(SelectedInstance.StoragePath, RegisterOnStartup, PowerOnStartup);
        }
    }


    [Parameter] public string InstanceName { get; set; }

    private IInstance SelectedInstance;

    private List<InstanceHandler._log> logs = new List<InstanceHandler._log>();


    protected override async Task OnInitializedAsync()
    {
        Layout.InstanceName = InstanceName;
        

        OnSelectInstance(InstanceName);

        managerFacade.InstanceHandler.GetLogs(SelectedInstance.ID, out logs);
        managerFacade.InstanceHandler.OnLogsUpdated += OnLogsUpdated;

        base.OnInitialized();
        var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
        // Check if the directory exists, if not, create it
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        rootDirectorySize = GetDirectorySize(path);
        watcher = new FileSystemWatcher(path)
        {
            NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
            IncludeSubdirectories = true
        };

        watcher.Changed += OnChanged;
        watcher.Created += OnChanged;
        watcher.Deleted += OnChanged;

        watcher.EnableRaisingEvents = true;

        foreach (var ipSuite in SelectedInstance.ControllerIPSuite4)

        {
            ips.Add(ipSuite.IPAddress.IPString);
            subnets.Add(ipSuite.SubnetMask.IPString);
            gateways.Add(ipSuite.DefaultGateway.IPString);
            ipv4Masks.Add(RegexMask.IPv4());
            subnetMask.Add(RegexMask.IPv4());
            gatewayMask.Add(RegexMask.IPv4());
        }

        var settings = persistenceHandler.ReadSettings(SelectedInstance.StoragePath);
        if (settings != null)
        {
            _registerOnStartup = settings.RegisterOnStartup;
            _powerOnStartup = settings.PowerOnOnStartup;
        }
    }

    private void OnLogsUpdated()
    {
    }

    private void OnSelectInstance(string name)
    {
        try
        {
            SelectedInstance = SimulationRuntimeManager.CreateInterface(name);
            SelectedInstance.OnOperatingStateChanged += OnSelectedInstanceOnOnOperatingStateChanged;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while selecting instance {name}: {e.Message}", Severity.Error);
        }
    }

    private void OnSelectedInstanceOnOnOperatingStateChanged(IInstance inSender, ERuntimeErrorCode inErrorCode, DateTime inDateTime, EOperatingState inPrevState, EOperatingState inOperatingState)
    {
        if (inSender != SelectedInstance)
        {
            return;
        }

        InvokeAsync(StateHasChanged);
    }


    private bool renameDialog;
    private string newDirectoryName;


    static string SnapshotFolder = "Snapshots";
    static string PlcManagerFolder = "Manager";
    static string label;
    private bool setNameDialog;
    private string directoryToRename;
    private string newSnapshotName;
    private string rootDirectorySize;
    private FileSystemWatcher watcher;

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();
    //     var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
    //     // Check if the directory exists, if not, create it
    //     if (!Directory.Exists(path))
    //     {
    //         Directory.CreateDirectory(path);
    //     }
    //
    //     rootDirectorySize = GetDirectorySize(path);
    //     watcher = new FileSystemWatcher(path)
    //     {
    //         NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
    //         IncludeSubdirectories = true
    //     };
    //
    //     watcher.Changed += OnChanged;
    //     watcher.Created += OnChanged;
    //     watcher.Deleted += OnChanged;
    //
    //     watcher.EnableRaisingEvents = true;
    // }

    private string[] GetSnapshots()
    {
        var path = Path.Combine(SelectedInstance.StoragePath, PlcManagerFolder, SnapshotFolder);
        label = Path.Combine(path, "test");
        if (!Directory.Exists(path))
        {
            return Array.Empty<string>();
        }

        var snapshots = Directory.GetFiles(path);
        var orderedSnapshots = snapshots.OrderByDescending(file => File.GetLastWriteTime(file)).ToArray();
        return orderedSnapshots;
    }


    private void OpenRenameDialog(string directory)
    {
        renameDialog = true;
        directoryToRename = directory;
    }

    private void CreateSnapshot()
    {
        try
        {
            var path = Path.Combine(SelectedInstance.StoragePath, PlcManagerFolder, SnapshotFolder);
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            var fullpath = Path.Combine(path, newSnapshotName);

            SelectedInstance.ArchiveStorage(fullpath);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to create snapshot {newSnapshotName}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            setNameDialog = false;
        }
    }

    private void OnChanged(object sender, FileSystemEventArgs e)
    {
        InvokeAsync(() =>
        {
            rootDirectorySize = GetDirectorySize(SimulationRuntimeManager.DefaultStoragePath);
            StateHasChanged();
        });
    }

    private void RenameDirectory()
    {
        try
        {
            string newDirectoryPath = Path.Combine(Path.GetDirectoryName(directoryToRename), newDirectoryName);
            Directory.Move(directoryToRename, newDirectoryPath);
            Snackbar.Add($"Directory {directoryToRename} renamed to {newDirectoryName} successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to rename directory {directoryToRename}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            renameDialog = false;
        }
    }


    private string GetDirectorySize(string directory)
    {
        try
        {
            var directoryInfo = new DirectoryInfo(directory);
            long sizeInBytes = directoryInfo.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);
            double sizeInKB = (double)sizeInBytes / 1024;
            double sizeInMB = sizeInKB / 1024;
            double sizeInGB = sizeInMB / 1024;

            if (sizeInGB > 1)
                return $"{sizeInGB:0.##} GB";
            else if (sizeInMB > 1)
                return $"{sizeInMB:0.##} MB";
            else
                return $"{sizeInKB:0.##} KB";
        }
        catch (Exception)
        {
            return "Size not available";
        }
    }

    private void DeleteFile(string filePath)
    {
        try
        {
            File.Delete(filePath);
            Snackbar.Add($"File {filePath} deleted successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to delete file {filePath}. Error: {e.Message}", Severity.Error);
        }
    }


    // IP settings
    public List<string> ips = new List<string>();
    public List<string> subnets = new List<string>();
    public List<string> gateways = new List<string>();

    public List<IMask> ipv4Masks = new List<IMask>();
    public List<IMask> subnetMask = new List<IMask>();
    public List<IMask> gatewayMask = new List<IMask>();


    public string getInterfaceByIndex(int index)
    {
        return SimulationRuntimeManager.NetInterfaces.FirstOrDefault(interf => interf.interfaceIndex == index).interfaceName;
    }

    public void setIp()
    {
        for (int i = 0; i < SelectedInstance.ControllerIPSuite4.Length; i++)
        {
            SIPSuite4 ipSuite = new SIPSuite4();
            ipSuite.IPAddress = new SIP { IPString = ips[i] };
            ipSuite.SubnetMask = new SIP { IPString = subnets[i] };
            ipSuite.DefaultGateway = new SIP { IPString = gateways[i] };
            SelectedInstance.SetIPSuite((uint)i, ipSuite, true);
        }
    }


// NET INTERFACE MAPPING
    string emptyString = "";

    public string getInterface(int index)
    {
        switch (index)
        {
            case 1:
                return interface_1;

            case 2:
                return interface_2;
            case 3:
                return interface_3;
            default:
                return "";
        }
    }

    private string _interface_1;

    public string interface_1
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE1)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE1, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE1, value);
                }

                _interface_1 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE1)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    private string _interface_2;

    public string interface_2
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE2)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE2, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE2, value);
                }

                _interface_2 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE2)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    private string _interface_3;

    public string interface_3
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE3)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE3, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE3, value);
                }

                _interface_3 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE3)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    public void setInterface(EPLCInterface interfaceID, uint value)
    {
        try
        {
            SelectedInstance.SetNetInterfaceMapping(interfaceID, value);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
        }
    }

    public void setInterface(EPLCInterface interfaceID, string value)
    {
        try
        {
            SelectedInstance.SetNetInterfaceMapping(interfaceID, value);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
        }
    }

    private void OnLogsUpdated(object? sender, EventArgs e)
    {
        managerFacade.InstanceHandler.GetLogs(SelectedInstance.ID, out logs);
        InvokeAsync(StateHasChanged);
    }

}