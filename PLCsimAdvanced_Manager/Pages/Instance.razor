@inject ISnackbar Snackbar
@page "/instance/{instanceName}"
@using PLCsimAdvanced_Manager.Services
@using Siemens.Simatic.Simulation.Runtime
@using Color = MudBlazor.Color
@inject ManagerFacade managerFacade


<div style="width: 100vw; min-width: 1000px; overflow-x: auto; justify-content: center; height:auto">
<div style="padding: 20px;">
<div>
    <MudText Typo="Typo.h6">Instance view </MudText>
</div>

<MudGrid>
<MudItem xs="6">
    <MudGrid>
        <MudItem xs="6">
            <div style="padding: 20px; background-color: #D5E9F1;">
                <MudToolBar>
                    <MudText Typo="Typo.h5" Color="Color.Primary">@InstanceName</MudText>
                    @* <MudSpacer/> *@
                    <InstanceOperatingstateChip SelectedInstance="SelectedInstance"></InstanceOperatingstateChip>
                    <MudSpacer/>
                    <InstancePowerButton SelectedInstance="SelectedInstance"></InstancePowerButton>
                    <InstanceRunStopButton SelectedInstance="SelectedInstance"></InstanceRunStopButton>
                    <MudSpacer/>
                    <MudButton @onclick="() => { try { managerFacade.InstanceHandler.MemoryReset(SelectedInstance.ID);  }catch (Exception e) { Snackbar.Add(e.Message, Severity.Error); } }">MRES</MudButton>


                </MudToolBar>
            </div>
        </MudItem>

        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.body2"> Size Snapshots: @rootDirectorySize </MudText>
                <MudDivider></MudDivider>
                <MudButton Size="Size.Small" Disabled="SelectedInstance.OperatingState != EOperatingState.Off" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => setNameDialog = true"><MudText Typo="Typo.subtitle2">Create Snapshot</MudText> </MudButton>

                <MudSimpleTable Dense="true">
                    <MudTh>Name</MudTh>
                    <MudTh>Timestamp</MudTh>
                    <MudTh Style="text-align: right;">Actions</MudTh>

                    @foreach (var snapshot in GetSnapshots())
                    {
                        var dir = snapshot; // Create a local copy to avoid issues with the foreach loop
                        var isRunning = SelectedInstance.OperatingState != EOperatingState.Off;

                        <MudTr>
                            <MudTd>


                                <MudChip Size="Size.Small" Disabled="@isRunning" Variant="Variant.Text" Color="Color.Info">
                                    <MudText Typo="Typo.subtitle1">
                                        <strong>@Path.GetFileName(snapshot)</strong>
                                    </MudText>
                                </MudChip>
                            </MudTd>
                            <MudTd>
                                <small>
                                    @File.GetLastWriteTime(snapshot).ToShortDateString()<br/>@File.GetLastWriteTime(snapshot).ToShortTimeString()
                                </small>
                            </MudTd>
                            <MudTd Style="text-align: right;">
                                <MudButtonGroup Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined" Color="Color.Success" OverrideStyles="false">
                                    <MudIconButton Title="Rollback" Icon="@Icons.Material.Outlined.SettingsBackupRestore" Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => SelectedInstance.RetrieveStorage(snapshot)"> </MudIconButton>
                                    <MudIconButton Title="Rename" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined" Color="Color.Warning" OnClick="() => OpenRenameDialog(dir)"></MudIconButton>
                                    <MudIconButton Title="Delete" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteFile(dir)"></MudIconButton>
                                </MudButtonGroup>
                            </MudTd>
                        </MudTr>
                    }
                </MudSimpleTable>
            </MudPaper>
        </MudItem>
        <MudFlexBreak/>
        <MudItem xs="6">
            @* <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"> *@
            <MudCard>
                <MudGrid>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">PLC Family</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.CPUType.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Name</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.Info.Name</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">ID</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.Info.ID</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Controller Name</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.ControllerName</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">License Status</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.LicenseStatus</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Controller Short Designation</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.ControllerShortDesignation</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Communication Interface</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.CommunicationInterface.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Strict Motion Timing</MudText>
                            <MudSwitch T="bool" @bind-Value="SelectedInstance.StrictMotionTiming" ThumbIcon="@(SelectedInstance.StrictMotionTiming == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(SelectedInstance.StrictMotionTiming == true ? Color.Success : Color.Error)"></MudSwitch>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Operating Mode</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.OperatingMode.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">System Time</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.SystemTime</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Scale Factor </MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.ScaleFactor.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Overwrite Minimum Cycle Time</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.OverwrittenMinimalCycleTime_ns.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Send Sync Event in Default Mode Enabled</MudText>
                            <MudText Typo="Typo.body2"> @SelectedInstance.IsSendSyncEventInDefaultModeEnabled.ToString()</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Storage Path</MudText>
                            <MudText Style="overflow: auto" Typo="Typo.body2"> @SelectedInstance.StoragePath</MudText>
                        </MudStack>
                    </MudItem>
                </MudGrid>

            </MudCard>
            @* </MudPaper> *@
        </MudItem>
        <MudItem xs="6">
            <MudCard>
                <MudStack>
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        @for (int i = 0; i < SelectedInstance.ControllerIPSuite4.Length; i++)
                        {
                            var index = i;
                            var t = $"X{i + 1}";
                            <MudTabPanel Text="@t">


                                <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                                    <MudItem xs="12" sm="10">
                                        <MudTextField Mask="@ipv4Masks[index]" Label="IP address" HelperText="@ipv4Masks[index].Mask"
                                                      @bind-Value="ips[index]" Variant="@Variant.Text" Clearable/>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                                    <MudItem xs="12" sm="10">
                                        <MudTextField Mask="@subnetMask[index]" Label="Subnet Mask" HelperText="@subnetMask[index].Mask"
                                                      @bind-Value="subnets[index]" Variant="@Variant.Text" Clearable/>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                                    <MudItem xs="12" sm="10">
                                        <MudTextField Mask="@gatewayMask[index]" Label="Default Gateway" HelperText="@gatewayMask[index].Mask"
                                                      @bind-Value="gateways[index]" Variant="@Variant.Text" Clearable/>
                                    </MudItem>
                                </MudGrid>
                                @if (SimulationRuntimeManager.NetworkMode == ECommunicationMode.Non_Promiscuous)
                                {
                                    switch (index + 1)
                                    {
                                        case 1:
                                            <MudSelect T="string" Label="Communication Interface" AnchorOrigin="Origin.BottomCenter" @bind-Value="@interface_1" EmptyValue="No mapping">
                                                @foreach (var v in SimulationRuntimeManager.NetInterfaces)
                                                {
                                                    <MudSelectItem Value="@v.interfaceName">@v.interfaceName</MudSelectItem>
                                                }
                                                <MudSelectItem Value="@emptyString">NO MAPPING</MudSelectItem>

                                            </MudSelect>
                                            break;
                                        case 2:
                                            <MudSelect T="string" Label="Communication Interface" AnchorOrigin="Origin.BottomCenter" @bind-Value="@interface_2" EmptyValue="No mapping">
                                                @foreach (var v in SimulationRuntimeManager.NetInterfaces)
                                                {
                                                    <MudSelectItem Value="@v.interfaceName">@v.interfaceName</MudSelectItem>
                                                }
                                                <MudSelectItem Value="@emptyString">NO MAPPING</MudSelectItem>
                                            </MudSelect>
                                            break;

                                        case 3:
                                            <MudSelect T="string" Label="Communication Interface" AnchorOrigin="Origin.BottomCenter" @bind-Value="@interface_3" EmptyValue="No mapping">
                                                @foreach (var v in SimulationRuntimeManager.NetInterfaces)
                                                {
                                                    <MudSelectItem Value="@v.interfaceName">@v.interfaceName</MudSelectItem>
                                                }
                                                <MudSelectItem Value="@emptyString">NO MAPPING</MudSelectItem>
                                            </MudSelect>
                                            break;
                                    }
                                }
                            </MudTabPanel>
                        }
                    </MudTabs >
                    <MudDivider ></MudDivider >
                    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="setIp"> Apply changes </MudButton >
                </MudStack>
            </MudCard>
        </MudItem>
        
        <MudItem>
            <MudTable Items="@logs" FixedHeader="true" Height="400px" Hover="true">
                <HeaderContent>
                    <MudTh>Timestamp</MudTh>
                    <MudTh>Log</MudTh>
                </HeaderContent>
                <RowTemplate>
                     <MudTd>@context.Timestamp</MudTd>
                     <MudTd>@context.Message</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>


</MudItem>

<MudItem xs="6">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        <MudTabPanel Text="Datablocks">
            <DataTable Area="EArea.DataBlock" InstanceName="@InstanceName"></DataTable>
        </MudTabPanel>
        <MudTabPanel Text="Inputs">
            <DataTable Area="EArea.Input" InstanceName="@InstanceName"></DataTable>

        </MudTabPanel>
        <MudTabPanel Text="Outputs">
            <DataTable Area="EArea.Output" InstanceName="@InstanceName"></DataTable>
        </MudTabPanel>
    </MudTabs>
</MudItem>

</MudGrid>

</div>
</div>

@code {
    [Parameter] public string InstanceName { get; set; }

    private IInstance SelectedInstance;
    
    private List<InstanceHandler._log> logs = new List<InstanceHandler._log>();


    protected override async Task OnInitializedAsync()
    {
        OnSelectInstance(InstanceName);

        managerFacade.InstanceHandler.GetLogs(SelectedInstance.ID, out logs);
        managerFacade.InstanceHandler.OnLogsUpdated += OnLogsUpdated;
        
        base.OnInitialized();
        var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
        // Check if the directory exists, if not, create it
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        rootDirectorySize = GetDirectorySize(path);
        watcher = new FileSystemWatcher(path)
        {
            NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
            IncludeSubdirectories = true
        };

        watcher.Changed += OnChanged;
        watcher.Created += OnChanged;
        watcher.Deleted += OnChanged;

        watcher.EnableRaisingEvents = true;

        foreach (var ipSuite in SelectedInstance.ControllerIPSuite4)

        {
            ips.Add(ipSuite.IPAddress.IPString);
            subnets.Add(ipSuite.SubnetMask.IPString);
            gateways.Add(ipSuite.DefaultGateway.IPString);
            ipv4Masks.Add(RegexMask.IPv4());
            subnetMask.Add(RegexMask.IPv4());
            gatewayMask.Add(RegexMask.IPv4());
        }
    }

    private void OnLogsUpdated()
    {
        
    }

    private void OnSelectInstance(string name)
    {
        try
        {
            SelectedInstance = SimulationRuntimeManager.CreateInterface(name);
            SelectedInstance.OnOperatingStateChanged += OnSelectedInstanceOnOnOperatingStateChanged;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while selecting instance {name}: {e.Message}", Severity.Error);
        }
    }

    private void OnSelectedInstanceOnOnOperatingStateChanged(IInstance inSender, ERuntimeErrorCode inErrorCode, DateTime inDateTime, EOperatingState inPrevState, EOperatingState inOperatingState)
    {
        if (inSender != SelectedInstance)
        {
            return;
        }

        InvokeAsync(StateHasChanged);
    }


    private bool renameDialog;
    private string newDirectoryName;


    static string SnapshotFolder = "Snapshots";
    static string label;
    private bool setNameDialog;
    private string directoryToRename;
    private string newSnapshotName;
    private string rootDirectorySize;
    private FileSystemWatcher watcher;

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();
    //     var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
    //     // Check if the directory exists, if not, create it
    //     if (!Directory.Exists(path))
    //     {
    //         Directory.CreateDirectory(path);
    //     }
    //
    //     rootDirectorySize = GetDirectorySize(path);
    //     watcher = new FileSystemWatcher(path)
    //     {
    //         NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
    //         IncludeSubdirectories = true
    //     };
    //
    //     watcher.Changed += OnChanged;
    //     watcher.Created += OnChanged;
    //     watcher.Deleted += OnChanged;
    //
    //     watcher.EnableRaisingEvents = true;
    // }

    private string[] GetSnapshots()
    {
        var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
        label = Path.Combine(path, "test");
        if (!Directory.Exists(path))
        {
            return Array.Empty<string>();
        }

        var snapshots = Directory.GetFiles(path);
        var orderedSnapshots = snapshots.OrderByDescending(file => File.GetLastWriteTime(file)).ToArray();
        return orderedSnapshots;
    }


    private void OpenRenameDialog(string directory)
    {
        renameDialog = true;
        directoryToRename = directory;
    }

    private void CreateSnapshot()
    {
        try
        {
            var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            var fullpath = Path.Combine(path, newSnapshotName);

            SelectedInstance.ArchiveStorage(fullpath);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to create snapshot {newSnapshotName}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            setNameDialog = false;
        }
    }

    private void OnChanged(object sender, FileSystemEventArgs e)
    {
        InvokeAsync(() =>
        {
            rootDirectorySize = GetDirectorySize(SimulationRuntimeManager.DefaultStoragePath);
            StateHasChanged();
        });
    }

    private void RenameDirectory()
    {
        try
        {
            string newDirectoryPath = Path.Combine(Path.GetDirectoryName(directoryToRename), newDirectoryName);
            Directory.Move(directoryToRename, newDirectoryPath);
            Snackbar.Add($"Directory {directoryToRename} renamed to {newDirectoryName} successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to rename directory {directoryToRename}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            renameDialog = false;
        }
    }


    private string GetDirectorySize(string directory)
    {
        try
        {
            var directoryInfo = new DirectoryInfo(directory);
            long sizeInBytes = directoryInfo.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);
            double sizeInKB = (double)sizeInBytes / 1024;
            double sizeInMB = sizeInKB / 1024;
            double sizeInGB = sizeInMB / 1024;

            if (sizeInGB > 1)
                return $"{sizeInGB:0.##} GB";
            else if (sizeInMB > 1)
                return $"{sizeInMB:0.##} MB";
            else
                return $"{sizeInKB:0.##} KB";
        }
        catch (Exception)
        {
            return "Size not available";
        }
    }

    private void DeleteFile(string filePath)
    {
        try
        {
            File.Delete(filePath);
            Snackbar.Add($"File {filePath} deleted successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to delete file {filePath}. Error: {e.Message}", Severity.Error);
        }
    }


    // IP settings
    public List<string> ips = new List<string>();
    public List<string> subnets = new List<string>();
    public List<string> gateways = new List<string>();

    public List<IMask> ipv4Masks = new List<IMask>();
    public List<IMask> subnetMask = new List<IMask>();
    public List<IMask> gatewayMask = new List<IMask>();


    public string getInterfaceByIndex(int index)
    {
        return SimulationRuntimeManager.NetInterfaces.FirstOrDefault(interf => interf.interfaceIndex == index).interfaceName;
    }

    public void setIp()
    {
        for (int i = 0; i < SelectedInstance.ControllerIPSuite4.Length; i++)
        {
            SIPSuite4 ipSuite = new SIPSuite4();
            ipSuite.IPAddress = new SIP { IPString = ips[i] };
            ipSuite.SubnetMask = new SIP { IPString = subnets[i] };
            ipSuite.DefaultGateway = new SIP { IPString = gateways[i] };
            SelectedInstance.SetIPSuite((uint)i, ipSuite, true);
        }
    }


// NET INTERFACE MAPPING
    string emptyString = "";

    public string getInterface(int index)
    {
        switch (index)
        {
            case 1:
                return interface_1;

            case 2:
                return interface_2;
            case 3:
                return interface_3;
            default:
                return "";
        }
    }

    private string _interface_1;

    public string interface_1
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE1)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE1, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE1, value);
                }

                _interface_1 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE1)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    private string _interface_2;

    public string interface_2
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE2)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE2, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE2, value);
                }

                _interface_2 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE2)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    private string _interface_3;

    public string interface_3
    {
        get => SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE3)).interfaceName;
        set
        {
            try
            {
                if (value == emptyString)
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE3, 0);
                }
                else
                {
                    SelectedInstance.SetNetInterfaceMapping(EPLCInterface.IE3, value);
                }

                _interface_3 = SimulationRuntimeManager.NetInterfaces.FirstOrDefault(i => i.interfaceIndex == SelectedInstance.GetNetInterfaceMapping(EPLCInterface.IE3)).interfaceName;
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
            }
        }
    }

    public void setInterface(EPLCInterface interfaceID, uint value)
    {
        try
        {
            SelectedInstance.SetNetInterfaceMapping(interfaceID, value);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
        }
    }

    public void setInterface(EPLCInterface interfaceID, string value)
    {
        try
        {
            SelectedInstance.SetNetInterfaceMapping(interfaceID, value);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error setting interface mapping: {e.Message}", Severity.Error);
        }
    }

    private void OnLogsUpdated(object? sender, EventArgs e)
    {
        managerFacade.InstanceHandler.GetLogs(SelectedInstance.ID, out logs);
        InvokeAsync(StateHasChanged);
        
    }

}