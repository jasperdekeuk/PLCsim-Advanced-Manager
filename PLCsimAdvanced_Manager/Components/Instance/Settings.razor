@using PLCsimAdvanced_Manager.Services.Persistence
@inject PersistenceHandler persistenceHandler
@page "/instance/{instanceName}/settings"
@layout InstanceLayout

<MudCard Style="padding: 10px">

    <MudStack>
        <MudItem>
            <MudText Typo="Typo.h5"> On Startup</MudText>
            <MudText Typo="Typo.body1"> Actions to be taken on this instance, when starting up PLCsim
                Advanced Manager
            </MudText>
            <MudCard Style="padding: 20px; flex: auto">

                <MudGrid>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Register On Startup</MudText>
                            <MudCheckBox @bind-Checked="RegisterOnStartup"></MudCheckBox>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Power On Startup</MudText>
                            <MudCheckBox @bind-Checked="PowerOnStartup"></MudCheckBox>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCard>


        </MudItem>
    </MudStack>

</MudCard>


@code {
    [Parameter] public string InstanceName { get; set; }
    private bool _registerOnStartup;
    private bool _powerOnStartup;
    private bool _runOnStartup;

    private IInstance SelectedInstance;

    protected override Task OnInitializedAsync()
    {
        SelectedInstance = SimulationRuntimeManager.CreateInterface(InstanceName);
        var settings = persistenceHandler.ReadSettings(SelectedInstance.StoragePath);
        if (settings != null)
        {
            _registerOnStartup = settings.RegisterOnStartup;
            _powerOnStartup = settings.PowerOnOnStartup;
        }

        return base.OnInitializedAsync();
    }

    public bool RegisterOnStartup
    {
        get => _registerOnStartup;
        set
        {
            if (_registerOnStartup != value)
            {
                _registerOnStartup = value;
                if (!value)
                {
                    PowerOnStartup = false;
                }
            }

            persistenceHandler.UpdateSettings(SelectedInstance.StoragePath, RegisterOnStartup, PowerOnStartup);
        }
    }

    public bool PowerOnStartup
    {
        get => _powerOnStartup;
        set
        {
            if (_powerOnStartup != value)
            {
                _powerOnStartup = value;
                if (value)
                {
                    RegisterOnStartup = true;
                }
            }

            persistenceHandler.UpdateSettings(SelectedInstance.StoragePath, RegisterOnStartup, PowerOnStartup);
        }
    }

}