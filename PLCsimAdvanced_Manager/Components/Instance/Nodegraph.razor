@page "/instance/{instanceName}/nodegraph"
@layout InstanceLayout
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using PLCsimAdvanced_Manager.Services.Nodegraph
@inject NodegraphServiceFactory NodegraphServiceFactory

<div class="diagram-container @(simulationRunning ? "border-yellow" : "")">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas>
            <Widgets>
                <SelectionBoxWidget/>
            </Widgets>

        </DiagramCanvas>
    </CascadingValue>

    <MudButton @onclick="_nodegraphService.ExecuteSimulation" Disabled="simulationRunning">Start simulation</MudButton>
    <MudButton @onclick="_nodegraphService.StopSimulation" Disabled="!simulationRunning">Stop simulation</MudButton>

    @if (simulationRunning)
    {
        <MudText>Stop simulation to change nodegraph</MudText>
    }
    else
    {
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

            <MudTabPanel Text="Datablocks">
                <VariablesTable Area="EArea.DataBlock" InstanceName="@InstanceName" Diagram="Diagram"></VariablesTable>
            </MudTabPanel>
            <MudTabPanel Text="Inputs">
                <VariablesTable Area="EArea.Input" InstanceName="@InstanceName" Diagram="Diagram"></VariablesTable>

            </MudTabPanel>
            <MudTabPanel Text="Outputs">
                <VariablesTable Area="EArea.Output" InstanceName="@InstanceName" Diagram="Diagram"></VariablesTable>
            </MudTabPanel>
        </MudTabs>
    }
</div>


@code {

    [Parameter] public string InstanceName { get; set; }

    private NodegraphService _nodegraphService;
    private BlazorDiagram Diagram;

    private bool simulationRunning;


    protected override void OnInitialized()
    {
        _nodegraphService = NodegraphServiceFactory.GetOrCreateService(InstanceName);
        Diagram = _nodegraphService.Diagram;
        _nodegraphService.OnSimulationStarted += OnSimulationStarted;
        _nodegraphService.OnSimulationStopped += OnSimulationStopped;
        simulationRunning = _nodegraphService.IsSimulationRunning;
    }

    private void OnSimulationStarted(object sender, EventArgs e)
    {
        simulationRunning = true;
        StateHasChanged();
    }

    private void OnSimulationStopped(object sender, EventArgs e)
    {
        simulationRunning = false;
        StateHasChanged();
    }


}