@page "/instance/{instanceName}/nodegraph"
@layout InstanceLayout
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using PLCsimAdvanced_Manager.Services.Nodegraph
@inject NodegraphServiceFactory NodegraphServiceFactory

<MudPaper Style="overflow:hidden; position:sticky; height: calc(100vh - 128px)">
    @* <MudDrawerContainer Class="mud-height-full" Style="height: calc(100vh - 128px)"> *@

    <div style="display: flex">
        <div style="display: inline-block" class="diagram-container @(simulationRunning ? "border-yellow" : "")">
            <CascadingValue Value="Diagram" IsFixed="true">

                <DiagramCanvas>
                    <Widgets>
                        <SelectionBoxWidget/>
                    </Widgets>
                </DiagramCanvas>
            </CascadingValue>

        </div>

        <div style="display: inline-block">
            @if (simulationRunning)
            {
                <MudText>Stop simulation to change nodegraph</MudText>
            }
            else
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                    <MudTabPanel Text="Datablocks">
                        <VariablesTable Area="EArea.DataBlock" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>
                    </MudTabPanel>
                    <MudTabPanel Text="Inputs">
                        <VariablesTable Area="EArea.Input" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>

                    </MudTabPanel>
                    <MudTabPanel Text="Outputs">
                        <VariablesTable Area="EArea.Output" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>
                    </MudTabPanel>
                </MudTabs>
            }
        </div>

    </div>
    <div>
        @* <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.PowerSettingsNew" Title="runSimulation" Size="Size.Small" Style="margin-right: 10px" @onclick="_nodegraphService.ExecuteSimulation" Disabled="simulationRunning">Start simulation *@
        @* </MudButton> *@
        @* *@
        @* <MudButton @onclick="_nodegraphService.StopSimulation" Disabled="!simulationRunning">Stop simulation *@
        @* </MudButton> *@


        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.PlayArrow"
                   Color="Color.Success"
                   Size="Size.Small"
                   Title="Run" Disabled="simulationRunning"
                   @onclick="_nodegraphService.ExecuteSimulation"
                   Style="margin-right: 10px; margin-left: 10px">
            Run Simulation
        </MudButton>

        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Stop" Color="Color.Error"
                   Size="Size.Small"
                   Title="Stop" Disabled="!simulationRunning"
                   @onclick="_nodegraphService.StopSimulation">
                   Stop Simulation
        </MudButton>
    </div>
</MudPaper>






@code {

    [Parameter] public string InstanceName { get; set; }

    private NodegraphService _nodegraphService;
    private BlazorDiagram Diagram;

    private bool simulationRunning;


    protected override void OnInitialized()
    {
        _nodegraphService = NodegraphServiceFactory.GetOrCreateService(InstanceName);
        Diagram = _nodegraphService.Diagram;
        _nodegraphService.OnSimulationStarted += OnSimulationStarted;
        _nodegraphService.OnSimulationStopped += OnSimulationStopped;
        simulationRunning = _nodegraphService.IsSimulationRunning;
    }

    private void OnSimulationStarted(object sender, EventArgs e)
    {
        simulationRunning = true;
        InvokeAsync(StateHasChanged);
    }

    private void OnSimulationStopped(object sender, EventArgs e)
    {
        simulationRunning = false;
        InvokeAsync(StateHasChanged);
    }

}