@page "/instance/{instanceName}/nodegraph"
@layout InstanceLayout
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using PLCsimAdvanced_Manager.Services.Nodegraph
@inject NodegraphServiceFactory NodegraphServiceFactory

<MudPaper Style="overflow:hidden; position:relative;">
    <MudDrawerContainer Class="mud-height-full" Style="height: calc(100vh - 128px)">

        <MudDrawer Width="510px" Height="100%" @bind-Open="@_drawerToggle" Anchor="Anchor.End" Elevation="5"
                   Variant="@DrawerVariant.Persistent">
            @if (simulationRunning)
            {
                <MudText>Stop simulation to change nodegraph</MudText>
            }
            else
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                    <MudTabPanel Text="Datablocks">
                        <VariablesTable Area="EArea.DataBlock" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>
                    </MudTabPanel>
                    <MudTabPanel Text="Inputs">
                        <VariablesTable Area="EArea.Input" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>

                    </MudTabPanel>
                    <MudTabPanel Text="Outputs">
                        <VariablesTable Area="EArea.Output" InstanceName="@InstanceName"
                                        Diagram="Diagram"></VariablesTable>
                    </MudTabPanel>
                </MudTabs>
            }

        </MudDrawer>

        <div class="diagram-container @(simulationRunning ? "border-yellow" : "")">
            <CascadingValue Value="Diagram" IsFixed="true">

                <DiagramCanvas>
                    <Widgets>
                        <NavigatorWidget Width="200"
                                         Class="border border-black bg-white absolute"
                                         Style="bottom: 15px; right: 15px;" />
                        <SelectionBoxWidget/>
                    </Widgets>
                </DiagramCanvas>
            </CascadingValue>

        </div>
        <MudButton @onclick="_nodegraphService.ExecuteSimulation" Disabled="simulationRunning">Start simulation
        </MudButton>
        <MudButton @onclick="_nodegraphService.StopSimulation" Disabled="!simulationRunning">Stop simulation
        </MudButton>
        <MudButton @onclick="ToggleDrawer">Toggle drawer</MudButton>
    </MudDrawerContainer>
</MudPaper>






@code {

    [Parameter] public string InstanceName { get; set; }

    private NodegraphService _nodegraphService;
    private BlazorDiagram Diagram;

    private bool simulationRunning;
    private bool _drawerToggle = true;


    protected override void OnInitialized()
    {
        _nodegraphService = NodegraphServiceFactory.GetOrCreateService(InstanceName);
        Diagram = _nodegraphService.Diagram;
        _nodegraphService.OnSimulationStarted += OnSimulationStarted;
        _nodegraphService.OnSimulationStopped += OnSimulationStopped;
        simulationRunning = _nodegraphService.IsSimulationRunning;
        Diagram.ZoomToFit(100);
    }

    private void OnSimulationStarted(object sender, EventArgs e)
    {
        simulationRunning = true;
        InvokeAsync(StateHasChanged);
    }

    private void OnSimulationStopped(object sender, EventArgs e)
    {
        simulationRunning = false;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleDrawer()
    {
        _drawerToggle = !_drawerToggle;
    }

}