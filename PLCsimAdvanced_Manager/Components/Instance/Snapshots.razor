@page "/instance/{instanceName}/snapshots"
@inject ISnackbar Snackbar
@layout InstanceLayout


<MudCard Style="padding: 20px; flex: auto">
    <MudText Typo="Typo.body2"> Size Snapshots: @rootDirectorySize </MudText>
    <MudDivider></MudDivider>
    <MudButton Size="Size.Small" Disabled="SelectedInstance.OperatingState != EOperatingState.Off"
               Variant="Variant.Outlined" Color="Color.Success" OnClick="() => setNameDialog = true">
        <MudText Typo="Typo.subtitle2">Create Snapshot</MudText>
    </MudButton>

    <MudSimpleTable Dense="true">
        <MudTh>Name</MudTh>
        <MudTh>Timestamp</MudTh>
        <MudTh Style="text-align: right;">Actions</MudTh>

        @foreach (var snapshot in GetSnapshots())
        {
            var dir = snapshot; // Create a local copy to avoid issues with the foreach loop
            var isRunning = SelectedInstance.OperatingState != EOperatingState.Off;

            <MudTr>
                <MudTd>


                    <MudChip Size="Size.Small" Disabled="@isRunning" Variant="Variant.Text"
                             Color="Color.Info">
                        <MudText Typo="Typo.subtitle1">
                            <strong>@Path.GetFileName(snapshot)</strong>
                        </MudText>
                    </MudChip>
                </MudTd>
                <MudTd>
                    <small>
                        @File.GetLastWriteTime(snapshot).ToShortDateString()<br/>@File.GetLastWriteTime(snapshot).ToShortTimeString()
                    </small>
                </MudTd>
                <MudTd Style="text-align: right;">
                    <MudButtonGroup Size="Size.Small" Disabled="@isRunning" Variant="Variant.Outlined"
                                    Color="Color.Success" OverrideStyles="false">
                        <MudIconButton Title="Rollback"
                                       Icon="@Icons.Material.Outlined.SettingsBackupRestore"
                                       Size="Size.Small" Disabled="@isRunning"
                                       Variant="Variant.Outlined" Color="Color.Success"
                                       OnClick="() => SelectedInstance.RetrieveStorage(snapshot)"></MudIconButton>
                        <MudIconButton Title="Rename" Icon="@Icons.Material.Outlined.Edit"
                                       Size="Size.Small" Disabled="@isRunning"
                                       Variant="Variant.Outlined" Color="Color.Warning"
                                       OnClick="() => OpenRenameDialog(dir)"></MudIconButton>
                        <MudIconButton Title="Delete" Icon="@Icons.Material.Outlined.Delete"
                                       Size="Size.Small" Disabled="@isRunning"
                                       Variant="Variant.Outlined" Color="Color.Error"
                                       OnClick="() => DeleteFile(dir)"></MudIconButton>
                    </MudButtonGroup>
                </MudTd>
            </MudTr>
        }
    </MudSimpleTable>
    <MudDialog @bind-IsVisible="setNameDialog" CloseButton="true">
        <DialogContent>
            <MudTextField @bind-Value="@newSnapshotName" Label="New snapshot name"/>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="CreateSnapshot">Create snapshot</MudButton>
        </DialogActions>
    </MudDialog>
    <MudDialog @bind-IsVisible="renameDialog" CloseButton="true">
        <DialogContent>
            <MudTextField @bind-Value="@newDirectoryName" Label="New snapshot name"/>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="RenameDirectory">Rename</MudButton>
        </DialogActions>
    </MudDialog>
</MudCard>



@code {
    [Parameter] public string InstanceName { get; set; }


    private IInstance SelectedInstance;

    private bool renameDialog;
    private string newDirectoryName;


    static string SnapshotFolder = "Snapshots";
    static string PlcManagerFolder = "Manager";
    static string label;
    private bool setNameDialog;
    private string directoryToRename;
    private string newSnapshotName;
    private string rootDirectorySize;
    private FileSystemWatcher watcher;

    protected override Task OnInitializedAsync()
    {
        SelectedInstance = SimulationRuntimeManager.CreateInterface(InstanceName);

        var path = Path.Combine(SelectedInstance.StoragePath, SnapshotFolder);
        // Check if the directory exists, if not, create it
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        rootDirectorySize = GetDirectorySize(path);
        watcher = new FileSystemWatcher(path)
        {
            NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
            IncludeSubdirectories = true
        };

        watcher.Changed += OnChanged;
        watcher.Created += OnChanged;
        watcher.Deleted += OnChanged;

        watcher.EnableRaisingEvents = true;
        return base.OnInitializedAsync();
    }

    private string[] GetSnapshots()
    {
        var path = Path.Combine(SelectedInstance.StoragePath, PlcManagerFolder, SnapshotFolder);
        label = Path.Combine(path, "test");
        if (!Directory.Exists(path))
        {
            return Array.Empty<string>();
        }

        var snapshots = Directory.GetFiles(path);
        var orderedSnapshots = snapshots.OrderByDescending(file => File.GetLastWriteTime(file)).ToArray();
        return orderedSnapshots;
    }


    private void OpenRenameDialog(string directory)
    {
        renameDialog = true;
        directoryToRename = directory;
    }

    private void CreateSnapshot()
    {
        try
        {
            var path = Path.Combine(SelectedInstance.StoragePath, PlcManagerFolder, SnapshotFolder);
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            var fullpath = Path.Combine(path, newSnapshotName);

            SelectedInstance.ArchiveStorage(fullpath);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to create snapshot {newSnapshotName}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            setNameDialog = false;
        }
    }

    private void OnChanged(object sender, FileSystemEventArgs e)
    {
        InvokeAsync(() =>
        {
            rootDirectorySize = GetDirectorySize(SimulationRuntimeManager.DefaultStoragePath);
            StateHasChanged();
        });
    }

    private void RenameDirectory()
    {
        try
        {
            string newDirectoryPath = Path.Combine(Path.GetDirectoryName(directoryToRename), newDirectoryName);
            Directory.Move(directoryToRename, newDirectoryPath);
            Snackbar.Add($"Directory {directoryToRename} renamed to {newDirectoryName} successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to rename directory {directoryToRename}. Error: {e.Message}", Severity.Error);
        }
        finally
        {
            renameDialog = false;
        }
    }


    private string GetDirectorySize(string directory)
    {
        try
        {
            var directoryInfo = new DirectoryInfo(directory);
            long sizeInBytes = directoryInfo.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);
            double sizeInKB = (double)sizeInBytes / 1024;
            double sizeInMB = sizeInKB / 1024;
            double sizeInGB = sizeInMB / 1024;

            if (sizeInGB > 1)
                return $"{sizeInGB:0.##} GB";
            else if (sizeInMB > 1)
                return $"{sizeInMB:0.##} MB";
            else
                return $"{sizeInKB:0.##} KB";
        }
        catch (Exception)
        {
            return "Size not available";
        }
    }

    private void DeleteFile(string filePath)
    {
        try
        {
            File.Delete(filePath);
            Snackbar.Add($"File {filePath} deleted successfully.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Failed to delete file {filePath}. Error: {e.Message}", Severity.Error);
        }
    }

}