@using Siemens.Simatic.Simulation.Runtime
@using Color = MudBlazor.Color


<MudDialog>
    <DialogContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @for (int i = 0; i < selectedInstance.ControllerIPSuite4.Length; i++)
            {
            
                var index = i;
                var t = $"X{i+1}";
                <MudTabPanel Text="@t">
         

                    <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                        <MudItem xs="12" sm="10">
                            <MudTextField Mask="@ipv4Masks[index]" Label="IP address" HelperText="@ipv4Masks[index].Mask"
                                          @bind-Value="ips[index]" Variant="@Variant.Text" Clearable/>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                        <MudItem xs="12" sm="10">
                            <MudTextField Mask="@subnetMask[index]" Label="Subnet Mask" HelperText="@subnetMask[index].Mask"
                                          @bind-Value="subnets[index]" Variant="@Variant.Text" Clearable/>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                        <MudItem xs="12" sm="10">
                            <MudTextField Mask="@gatewayMask[index]" Label="Default Gateway" HelperText="@gatewayMask[index].Mask"
                                          @bind-Value="gateways[index]" Variant="@Variant.Text" Clearable/>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="justify-space-between" Style="max-width: 600px;">
                        <MudItem xs="12" sm="10">
                            <MudField Label="Net Interface Mapping">@getInterfaceByIndex(selectedInstance.GetNetInterfaceMapping((EPLCInterface)index))</MudField>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            
            }
        </MudTabs>

        <MudDivider></MudDivider>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="setIp"> Apply changes </MudButton>
        
    </DialogContent>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IInstance selectedInstance { get; set; }

    public List<string> ips = new List<string>();
    public List<string> subnets = new List<string>();
    public List<string> gateways = new List<string>();

    public List<IMask> ipv4Masks = new List<IMask>();
    public List<IMask> subnetMask = new List<IMask>();
    public List<IMask> gatewayMask = new List<IMask>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var ipSuite in selectedInstance.ControllerIPSuite4)
        {
            ips.Add(ipSuite.IPAddress.IPString);
            subnets.Add(ipSuite.SubnetMask.IPString);
            gateways.Add(ipSuite.DefaultGateway.IPString);
            ipv4Masks.Add(RegexMask.IPv4());
            subnetMask.Add(RegexMask.IPv4());
            gatewayMask.Add(RegexMask.IPv4());
        }
    }

    public string getInterfaceByIndex(int index)
    {
        return SimulationRuntimeManager.NetInterfaces.FirstOrDefault(interf => interf.interfaceIndex == index).interfaceName;
    }

    public void setIp()
    {
        for (int i = 0; i < selectedInstance.ControllerIPSuite4.Length; i++)
        {
            SIPSuite4 ipSuite = new SIPSuite4();
            ipSuite.IPAddress = new SIP { IPString = ips[i] };
            ipSuite.SubnetMask = new SIP { IPString = subnets[i] };
            ipSuite.DefaultGateway = new SIP { IPString = gateways[i] };
            selectedInstance.SetIPSuite((uint)i, ipSuite, true);

        }
        
        MudDialog.Close();
    }

}